from typing import Any
from django.http import HttpResponseRedirect, HttpRequest, HttpResponse, HttpResponseForbidden
from .models import PlaceOfInterest, VisitedPlaceOfInterest
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.utils import timezone
from .forms import PlaceOfInterestForm, LocationForm
from json import dumps
from django.core.exceptions import ObjectDoesNotExist
from django.contrib.auth.decorators import login_required

# Create your views here.

@login_required
def submit(request: HttpRequest) -> HttpResponse | HttpResponseRedirect | HttpResponseForbidden:
    '''
    Endpoint for game keepers to create a new place of interest

    Parameters
    ----------
    request : HttpRequest
              The request object generated by django

    Returns
    -------
    HttpResponse or HttpResponseRedirect
        Containing the submit.html webpage.
        If HttpResponseRedirect it means that a POST request was received and a new place of interest was created
    '''
    if not request.user.is_staff:
        return HttpResponseForbidden()

    submitted = False
    id = -1
    if request.method == "POST":
        # Populate the form with the POST data
        form = PlaceOfInterestForm(request.POST)
        if form.is_valid():
            obj = form.save(commit=False)
            obj.save()
            poi = PlaceOfInterest.objects.get(pk=obj.id)
            return HttpResponseRedirect(f'/poi/submit?submitted=True&id={poi.id}')
    else:  # Is a GET request
        # Create a blank form
        form = PlaceOfInterestForm
        # Check if the GET request is a result of the redirect after a post
        if 'submitted' in request.GET and 'id' in request.GET:
            submitted = True
            id = request.GET['id']

    return render(request, 'poi/submit.html', {'form': form, 
                                                'submitted': submitted, 
                                                'id': id,
                                                'is_staff': request.user.is_staff})

@login_required
def information(request: HttpRequest, poi_id: int) -> HttpResponse | HttpResponseRedirect:
    '''
    Endpoint for users to view additional information about a place of interest

    Parameters
    ----------
    request : HttpRequest
              The request object generated by django
    poi_id : int
             The id of the place of interest to display information for

    Returns
    -------
    HttpResponse or HttpResponseRedirect
        Containing the info.html webpage.
        If HttpResponseRedirect it means that a POST request was received and a user visited a place of interest
    '''
    # Get the place of interest to display info for
    poi = get_object_or_404(PlaceOfInterest, pk=poi_id)
    submitted = False
    close = False
    visited = False

    # See if the user has already visited this place of interest
    try:
        VisitedPlaceOfInterest.objects.get(user=request.user, place=poi)
        visited = True
    except ObjectDoesNotExist:
        visited = False

    if request.method == "POST" and visited == False:  # If they haven't visited it and wish to
        form = LocationForm(request.POST)
        if form.is_valid():
            lat = float(form.cleaned_data['lat'])
            lon = float(form.cleaned_data['lon'])
            lat_delta = abs(lat - float(poi.lat)) 
            lon_delta = abs(lon - float(poi.lon)) 
            if lat_delta <= 0.001 and lon_delta <= 0.001:  # 111 meter difference between user location and poi location
                close = True
                VisitedPlaceOfInterest.objects.create(user=request.user, place=poi)

            return HttpResponseRedirect(f'/poi/info/{poi_id}?submitted=True&close={close}')
    else:
        form = LocationForm
        if 'submitted' in request.GET and 'close' in request.GET:
            submitted = True
            close = request.GET['close']

    # json so the js can add the point marker to the map
    json_dict = {'lat': poi.lat, 'lon': poi.lon, 'close': close}

    return render(request, 'poi/info.html', {'visited': visited,
                                             'close': close,
                                             'submitted': submitted,
                                             'poi': poi,
                                             'lat_lon': json_dict,
                                             'form': form,
                                             'is_staff': request.user.is_staff})

def map(request: HttpRequest) -> HttpResponse:
    '''
    Endpoint for users to view places of interest on a map and view their location

    Parameters
    ----------
    request : HttpRequest
              The request object generated by django

    Returns
    -------
    HttpResponse
        Containing the map.html webpage.
    '''
    pois = PlaceOfInterest.objects.all()
    poi_list = []
    for poi in pois:
        poi_list.append({'title': poi.title, 'desc': poi.desc, 'lat': poi.lat, 'lon': poi.lon, 'id': poi.id})
    json_dict = {'places': poi_list}
    return render(request, 'poi/map.html', {'json_dict': json_dict,
                                            'is_staff': request.user.is_staff})

